name: Multi-Platform Build and Test

on:
  push:
    branches: [ main, develop, v*-* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Validation multi-OS (formatage, linting, tests, couverture)
  validation:
    name: 🧪 Validation (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: 🎨 Check formatting
      run: cargo fmt --all -- --check
      
    - name: 🔍 Lint with clippy
      run: cargo clippy --all-features --all-targets -- -D warnings -D clippy::pedantic -D clippy::nursery -D clippy::cargo -A clippy::multiple_crate_versions -A clippy::cargo_common_metadata
          
    - name: 🧪 Run tests
      run: cargo test --all-features --verbose
      
    - name: 📚 Test documentation
      run: cargo test --doc

  # Couverture de code et validation seuil (Ubuntu uniquement)
  coverage:
    name: 📊 Couverture de Code
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-coverage-${{ hashFiles('**/Cargo.lock') }}
        
    - name: 📈 Generate coverage with validation
      run: |
        cargo install cargo-llvm-cov --locked
        cargo llvm-cov --workspace --cobertura --output-path cobertura.xml
        
        # Extract and validate coverage threshold
        COVERAGE=$(grep -oP 'line-rate="\K[^"]*' cobertura.xml | head -1 | awk '{printf "%.1f", $1*100}')
        echo "Coverage: ${COVERAGE}%"
        
        if awk "BEGIN {exit !($COVERAGE >= 90)}"; then
          echo "✅ Coverage above 90%: ${COVERAGE}%"
        else
          echo "❌ Coverage below 90%: ${COVERAGE}%"
          exit 1
        fi
        
    - name: 📤 Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: cobertura.xml

  # Audit de sécurité
  security:
    name: 🔒 Audit de Sécurité  
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
        
    - name: 🔍 Install cargo-audit
      run: cargo install cargo-audit --locked
      
    - name: 🛡️ Security audit
      run: cargo audit

  # Tests cryptographiques avancés
  crypto-tests:
    name: 🔐 Tests Cryptographiques
    runs-on: ubuntu-latest
    if: contains(github.ref, 'premiere-griffe') || contains(github.ref, 'radar-moustaches') || contains(github.ref, 'ronron-bonheur')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
        
    - name: 🔐 Run crypto tests
      run: cargo test --release --verbose -p miaou-crypto
      
  # Tests mutation (robustesse du code)
  mutation-tests:
    name: 🧬 Tests de Mutation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
        
    - name: 🧬 Run mutation tests
      run: |
        cargo install cargo-mutants --locked
        cargo mutants --check --timeout 30

  # Builds desktop multiplateformes
  build-desktop:
    needs: [validation, coverage]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: miaou-cli
            asset_name: miaou-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: miaou-cli
            asset_name: miaou-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: miaou-cli.exe
            asset_name: miaou-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: miaou-cli
            asset_name: miaou-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: miaou-cli
            asset_name: miaou-macos-aarch64

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }} -p miaou-cli
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
    
    - name: Test (native only)
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin' || matrix.target == 'aarch64-apple-darwin'
      run: cargo test --target ${{ matrix.target }} --workspace
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  # Build pour Android (nécessite SDK Android)
  build-android:
    needs: [validation, coverage]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install Android NDK
      run: |
        ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653"
        echo "ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/25.2.9519653" >> $GITHUB_ENV
    
    - name: Configure cargo for Android
      run: |
        mkdir -p ~/.cargo
        cat >> ~/.cargo/config.toml << EOF
        [target.aarch64-linux-android]
        ar = "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        linker = "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang"
        
        [target.armv7-linux-androideabi]
        ar = "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        linker = "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang"
        
        [target.i686-linux-android]
        ar = "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        linker = "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android33-clang"
        
        [target.x86_64-linux-android]
        ar = "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        linker = "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android33-clang"
        EOF
    
    - name: Build for Android
      run: cargo build --target ${{ matrix.target }} --profile release-mobile -p miaou-cli
    
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: miaou-android-${{ matrix.target }}
        path: target/${{ matrix.target }}/release-mobile/miaou-cli

  # Build WebAssembly
  build-wasm:
    needs: [validation, coverage]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      run: |
        rustup toolchain install stable --profile minimal --no-self-update
    
    - name: Add WASM targets
      run: |
        rustup target add wasm32-unknown-unknown
        rustup target add wasm32-wasip1
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Build WASM core lib
      run: cargo build --target wasm32-unknown-unknown --profile release-wasm --lib
    
    - name: Build WASM CLI (WASIP1)
      run: cargo build --target wasm32-wasip1 --profile release-wasm -p miaou-cli
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: miaou-wasm
        path: |
          target/wasm32-unknown-unknown/release-wasm/*.wasm
          target/wasm32-wasip1/release-wasm/*.wasm

  # Documentation
  documentation:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
        
    - name: 📚 Generate documentation
      run: |
        cargo doc --all-features --no-deps --document-private-items
        
    - name: 🌐 Deploy documentation (main branch only)
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  # Benchmarks de performance (Linux seulement)
  benchmarks:
    needs: [validation, coverage]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-bench-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --workspace
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  # Release automatique pour les tags
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [validation, coverage, security, build-desktop, build-android, build-wasm, documentation, benchmarks]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create release archives
      run: |
        cd artifacts/
        for dir in */; do
          if [[ "$dir" == *"android"* ]]; then
            cd "$dir" && zip -r "../${dir%/}.zip" * && cd ..
          elif [[ "$dir" == *"wasm"* ]]; then
            cd "$dir" && tar -czf "../${dir%/}.tar.gz" * && cd ..
          else
            cd "$dir" && tar -czf "../${dir%/}.tar.gz" * && cd ..
          fi
        done
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.{tar.gz,zip}
        draft: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}