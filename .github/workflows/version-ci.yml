name: 🔍 Validation par Version

on:
  push:
    branches: 
      - 'v*.*.*-*'  # Branches de version (ex: v0.1.0-premiere-griffe)
      - 'feature/*'
      - 'fix/*'
  pull_request:
    branches: 
      - 'v*.*.*-*'
      - main

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Job 1: Validation de base (formatage, linting, tests)
  validation:
    name: 🧪 Validation (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: 🎨 Check formatting
      run: cargo fmt --all -- --check
      
    - name: 🔍 Lint with clippy
      run: |
        cargo clippy --all-features --all-targets -- \
          -D warnings \
          -D clippy::pedantic \
          -D clippy::nursery \
          -D clippy::cargo \
          -A clippy::multiple_crate_versions \
          -A clippy::cargo_common_metadata
          
    - name: 🧪 Run tests
      run: cargo test --all-features --verbose
      
    - name: 📚 Test documentation
      run: cargo test --doc

  # Job 2: Couverture de code
  coverage:
    name: 📊 Couverture de Code
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-coverage-${{ hashFiles('**/Cargo.lock') }}
        
    - name: 📊 Install tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: 📈 Generate coverage report
      run: |
        cargo tarpaulin --all-features --out Xml --timeout 300
        
    - name: ✅ Check coverage threshold
      run: |
        COVERAGE=$(grep -oP 'line-rate="\K[^"]*' cobertura.xml | head -1 | awk '{print $1*100}')
        echo "Coverage: ${COVERAGE}%"
        if [ "$(echo "$COVERAGE < 90" | bc -l)" -eq 1 ]; then
          echo "❌ Coverage below 90%: ${COVERAGE}%"
          exit 1
        fi
        echo "✅ Coverage above 90%: ${COVERAGE}%"
        
    - name: 📤 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml

  # Job 3: Audit de sécurité
  security:
    name: 🔒 Audit de Sécurité  
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: 🔍 Install cargo-audit
      run: cargo install cargo-audit
      
    - name: 🛡️ Security audit
      run: cargo audit

  # Job 4: Tests cryptographiques (Phase 1+)
  crypto-tests:
    name: 🔐 Tests Cryptographiques
    runs-on: ubuntu-latest
    if: contains(github.ref, 'premiere-griffe') || contains(github.ref, 'radar-moustaches') || contains(github.ref, 'ronron-bonheur')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: 🔐 Run crypto KAT tests
      run: cargo test crypto::tests::known_answer_tests --release --verbose
      
    - name: 🧮 Run crypto property tests
      run: cargo test crypto::tests::property_tests --release --verbose

  # Job 5: Tests réseau (Phase 2+)
  network-tests:
    name: 🌐 Tests Réseau P2P
    runs-on: ubuntu-latest
    if: contains(github.ref, 'radar-moustaches') || contains(github.ref, 'ronron-bonheur') || contains(github.ref, 'toilettage-royal')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: 🌐 Run network integration tests
      run: cargo test network::tests::integration_tests --release --verbose
      timeout-minutes: 10

  # Job 6: Tests mobile (Phase 4+)  
  mobile-compilation:
    name: 📱 Compilation Mobile
    runs-on: ubuntu-latest
    if: contains(github.ref, 'toilettage-royal') || contains(github.ref, 'chat-gouttiere') || contains(github.ref, 'neuf-vies')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        targets: aarch64-linux-android, aarch64-apple-ios
        override: true
        
    - name: 🤖 Test Android compilation
      run: cargo check --target aarch64-linux-android --features android
      
    - name: 🍎 Test iOS compilation  
      run: cargo check --target aarch64-apple-ios --features ios

  # Job 7: Benchmarks et performance
  benchmarks:
    name: ⚡ Benchmarks Performance
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}
        
    - name: ⚡ Run benchmarks
      run: cargo bench --no-run
      
    - name: 📊 Store benchmark results
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p benchmarks/results
        cargo bench > benchmarks/results/$(date +%Y%m%d-%H%M%S).txt

  # Job 8: Documentation
  documentation:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: 📚 Generate documentation
      run: |
        cargo doc --all-features --no-deps --document-private-items
        
    - name: 🌐 Deploy documentation (main branch only)
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  # Job 9: Release préparation (tags uniquement)
  release:
    name: 🚀 Préparation Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [validation, coverage, security, crypto-tests, benchmarks, documentation]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: 📦 Build release binaries
      run: |
        cargo build --release --all-features
        
    - name: 📋 Generate release notes
      run: |
        echo "# Miaou ${GITHUB_REF#refs/tags/}" > release_notes.md
        echo "" >> release_notes.md
        echo "## Changements" >> release_notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
        
    - name: 🚀 Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: |
          target/release/miaou*
          target/doc/**
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}